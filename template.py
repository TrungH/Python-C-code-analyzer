#template

APP_NAME = 'FMEA Analyzer'

LUCKY = \
'''  
   _____                    _   _                   _     _ 
  / ____|                  | | | |                 | |   | |
 | |  __   ___    ___    __| | | |     _   _   ___ | | __| |
 | | |_ | / _ \  / _ \  / _` | | |    | | | | / __|| |/ /| |
 | |__| || (_) || (_) || (_| | | |____| |_| || (__ |   < |_|
  \_____| \___/  \___/  \__,_| |______|\__,_| \___||_|\_\(_)
                                                            
                                                            '''

                                                            
MODULE_NAME = ""

#using split_func.py
FUNC_DB_ID = 0
FUNC_SEP = '''/*******************************************************************************'''
FUNC_START = r'\*{10}\*+\/'

FUNC_PATTERN = r'\*\*\sFunction\sName\s*:\s(\w+)'

#using in input_param_analyze.py
PARAM_INPUT_PATTERN = r'(FUNC[^{]+\))'

P2CONST_PATTERN = r'([CONST]*P2CONST[^)]+\))'
P2VAR_PATTERN = r'([CONST]*P2VAR[^)]+\))'
P2CONST = "P2CONST"
P2VAR = "P2VAR"

RETURN_PATTERN = r'(return[^;]*)'

#using in build_lp_json.py
HW_REG_PATTERN  = r'([^\(][a-zA-Z0-9\_\[\]\.(\->)]*'
LP_PATTERN      = r'([a-zA-Z0-9]+\_Lp[a-zA-Z0-9\_\[\]\.(\->)]*)'
GP_PATTERN      = r'([a-zA-Z0-9]+\_Gp[a-zA-Z0-9\_\[\]\.(\->)]*)'
GST_PATTERN     = r'([a-zA-Z0-9]+\_Gst[a-zA-Z0-9\_\[\]\.(\->)]*)'
GAA_PATTERN     = r'([a-zA-Z]+\_Gaa[a-zA-Z0-9\_\[\]\.(\->)]*)'

#default input, could be modify to fit your need
CSV_SEPERATOR   = ","
OUT_CSV         = "output.csv"

GEN_IMPORT_DATA_ENABLE = True
OUT_IMPORT_CSV = "out_template.csv"

SOURCE_DIR      = "./src"
INC_DIR         = "./include"
OUTDIR          = "out"

#Should modify 
ID_PATTERN      = "FAMILY_MCAL_MSN_SA_%03d"
ID_START_INDEX  = 0
ID_ENABLE       = True
FUNCION_NAME_FOR_ELEMENT = False
#Common database through out the analyze process
FMEA_DB         = {}
FMEA_JSON       = "fmea.json"
FMEA_SORT_KEY   = 'id'
FUNC_LIST       = []
#Volatile pattern, using in hardware_helper.py
STRUCT_DEF      = "typedef struct"
UNION_DEF       = "typedef union"
VOLATILE        = " volatile "
VOLATILE_JSON   = "volatile.json"
PUBLIC_CODE     = r'\w+_PUBLIC_CODE'
INTERRUPT       = r'\s+_INTERRUPT_\s+'

#function call db
FUNC_CALL_DB    = {}
FUNC_CALL_JSON  = "func_call.json"
COVER_LIST_KEY = "Call_Cover_List"
FULL_COVER_KEY = "Full_Cover"
CALL_GRAPH_DOT = "call_graph.dot"
CALL_GRAPH_PNG = "call_graph.png"
#you should add your dot to path:
#/cygdrive/e/trunghoang/graphviz-2.38/bin/
DOT_EXE        = "dot.exe"
GEN_GRAPH_DOT_CMD = DOT_EXE + " " + CALL_GRAPH_DOT + " -Tpng -o" + CALL_GRAPH_PNG


#Output section setup:
OUTPUT_DISABLE_LOCAL_POINTER = True
NEW_LINE = "\n"


#Disturbed Access Sequence
ENTER_CRITICAL_SECTION_PATTERN = r'\w+ENTER_CRITICAL_SECTION\((\w+)\)[;]*'
EXIT_CRITICAL_SECTION_PATTERN = r'\w+EXIT_CRITICAL_SECTION\((\w+)\)[;]*'
DAS_EXCEPTION = r'\w+Config\w+'

DAS_NOT_APPLICABLE = {
    "FM_Applicability": "not applicable",
    "Comment_on_FM": "There is no need to apply a 'Disturbed Access Sequence' failure mode on read only <Element Category>  generated by GenTool.",
    "Expected_Safety_Mechanism":"not applicable",
    "Judment":"not applicable",
    "Remark":"#var_name#"
}

GP_ONLY_DAS_NOT_APPLICABLE = {
    "FM_Applicability": "not applicable",
    "Comment_on_FM": "There is no need to apply a 'Disturbed Access Sequence' failure mode on read only global pointer",
    "Expected_Safety_Mechanism":"not applicable",
    "Judment":"not applicable",
    "Remark":""
}

DAS_COVER = {
    "FM_Applicability": "applicable",
    "Rationale_on_SM" : "Cover by #section#",
}

DAS_NOT_COVER = {
    "FM_Applicability": "applicable",
    "Rationale_on_SM" : "Not cover by any critical section",
}

NOT_PRESENT = "<not present>"

API_COMMON_CAT_NAME_FM = {
    #cat                     Name    Fm
    "Time Execution":       ["#API#", "Late"],
    "Input Coherency":      ["<not present>", ""],
    "Scheduling":           ["#Msn#_Init", "Incorrect Order of API Calls"]
}

INTERRUPT_COMMON_CAT_NAME_FM = {
    #cat                     Name    Fm
    "Time Execution":       ["#API#", "Late"],
    "Input Coherency":      ["<not present>", ""],
    "Scheduling":           ["<not present>", ""]
}

DISTURBED = "Disturbed Access Sequence"
#Failure mode gen list for each element            
API_SEPECIFIC_CAT_FM = \
{
    "Loop": {
        "fm": {
            "var": [
                "Stuck"
            ], 
            "ptr": []
        }, 
        "cat": {
            "var": [
                "Loop"
            ], 
            "ptr": []
        }
    }, 
    "Return": {
        "fm": {
            "var": [
                "Output Out of Range"
            ], 
            "ptr": []
        }, 
        "cat": {
            "var": [
                "Return Value"
            ], 
            "ptr": []
        }
    }, 
    "LocalPointers": {
        "fm": [
            "Output Out of Range", 
            "Disturbed Access Sequence"
        ], 
        "cat": {
            "var": "Global Variable", 
            "ptr": "Global Pointer"
        }
    }, 
    "HwRegs": {
        "fm": {
            "var": [
                "Output Out of Range", 
                "Disturbed Access Sequence"
            ], 
            "ptr": []
        }, 
        "cat": {
            "var": [
                "Hw Element"
            ], 
            "ptr": []
        }
    }, 
    "GlobalPointers": {
        "fm": [
            "Output Out of Range", 
            "Disturbed Access Sequence"
        ], 
        "cat": {
            "var": "Global Variable", 
            "ptr": "Global Pointer"
        }
    }, 
    "GlobalArrays": {
        "fm": [
            "Output Out of Range", 
            "Disturbed Access Sequence"
        ], 
        "cat": {
            "var": "Global Variable", 
            "ptr": "Global Pointer"
        }
    }, 
    "InputParams": {
        "fm": {
            "var": [
                "Input Out of Range", 
                "Output Out of Range"
            ], 
            "ptr": [
                "Input Null", 
                "Output Null"
            ]
        }, 
        "cat": {
            "var": "Parameter(var)", 
            "ptr": "Parameter(ptr)"
        }
    }, 
    "GlobalStruct": {
        "fm": [
            "Output Out of Range", 
            "Disturbed Access Sequence"
        ], 
        "cat": {
            "var": "Global Variable", 
            "ptr": "Global Pointer"
        }
    }
}
#Toggle debug info
DEBUG   = False
INFO    = True
PLENTY_INFO = False
DEBUG_SEP_LINE = "---------------------------------------------------------------------"
